MONOLITHIC: in monolithic we use single sever and single db for multiple services
MICRO SERVICE: in micro service we use multiple servers and multiple dbs for multiple services
                ( we have to choose the architecture based on aplication and its services)

In micro services we do not use servers, we use containers.
CONTAINER: container is virtual machine without having OS
DOCKER: it is a tool used to create a container, and the container uses IMAGE which is having os&packages already installed(pre built).
                            SERVER = VM = CONTAINER
                                      
DOCKER:
      it is a open source entralized platform designed to create, deploy and run the application
      docker is written in GO language
      docker creates containers on host os to run application
      we can install docker in any os but docker engine runs natively on linux distributions.
      It allows applications to use the same Linux kernel as a system on the host computer, rather than creating a whole virtual O.S.
      Before Docker performs O.S level Virtualization also known as Containerization. process of packing application along with its dependencies.
      It was initially released in March 2013, and developed by Solomon Hykes and Sebastian Pahl.
      Docker is a set of platform-as-a-service that use O.S level Virtualization, where as VM ware uses Hardware level Virtualization.
      Container have O.S files but its negligible in size compared to original files of that O.S.
COMPONANTS:
       CLIENT: It takes the commands and executes with communication docker daemon
       HOST: The place where you installed docker.
       DAEMON: Deals with docker componets(images, containers, volumes ----). it is inside docker host.
       REGISTRY: It stores all the Images.
**********************************************************************************************************************************************************************
**********************************************************************************************************************************************************************
DAY02 31-05-2023:

WORKING WITH DOCKER:
       installation:
       yum install docker -y
       systemctl restart or start docker.service
       sytemctl status docker.service
       docker --version
 DOCKER COMMANDS:
 
       docker pull ubuntu     --> to get ubuntu image form rigistry, i.e., we are getting ubuntu os image from rigistry to work
       docker images          --> to see the all images 
       docker run ubuntu       ---> to create container. but here we did not given cnt name so its takes a default name with ubuntu image
       docker run --name sairamana ubutu 
                               --> creating cnt with name and with ubuntu os image, but not entering into container
       docker run -it --sairamana2 ubuntu  
                                --> creating ctn with name and with ubuntu os image and entering into cnt.
                                -it --> interactive terminal
       docker ps -a             --> to check all containers
       docker ps                --> to check all active containers
       docker start saiamana    --> to start stopped container
       docker attach sairamana2 --> to go into a perticular container
       
 Inside a container:
       apt update -y                --> in ubuntu package manager is "apt" (advance paackage tool)
       apt install maven -y         --> install maven in sairamana2 cnt with os image ubuntu
       apt install mysql-server -y  --> creating mysql server in sairamana2 cnt   """""""'
       mkdir sai                    --> creating sai directory in sairamana2 cnt  """"""""
       touch sai/file.txt           --> creating file.txt in sai directory in sairamana2 container """""
       ( so now all above things are done in sairamana2 cnt with ubuntu os image)
        ctrl pq                       --> to exti from container.
       docekr commit sairamana2 image:v1 --> to creating a os image from sairamana2 container and whatever the informatin of sairamana2 container 
                                             will be available in "image:v1" image
       ctrl pq
       docker run -it --name sairamana4 image:v1 --> creating new container sairamana4 with os image "image:v1". and all the files and services
                                                     and etc are present in sairamana2 container will be available in sairamana4 container too
                                                     because we have taken the os image from sairamana2 cnt by comminting image:v1
                                                     (i.e., sai directory, file.txt, maven will have in sairamama4 container also)
        ...............................................................................................................................................
   
DOCKER FILE:
          > It is an automated method to create docker images.
          > in docker file D must be captial.
          > in single folder we need to have only one docker file.
          > docker file will have some componets inside it.
          > each component is on CAPITAL letter.




















*********************************************************************************************************************************************************************
*********************************************************************************************************************************************************************
Day 03 01-06-2023
                                                                                                      [some impartant facts:
VOLUMES:                                                                                                     ctrl pq-> to come out from container by not stopping cnt.
-> By default when we create a volume the data will also going t store in the local host                      

PART1(CONTAINER TO CONTAINER VOLUME CREATION):
       1. vim Dockerfile--> FROM ubuntu
                            VOLUMES ["/volume1"]
          docker build -t image:v1
          docker run -it --name sairamana1 imaage:v1
          ls--> volume1
          cd volume1 
          touch file{1..3}
          ctrl pq
          docker run -it --name sairamana2 --volumes-from=sairamana1 --privileged=true ubuntu
           ls--> volume1 will be have in sairamana2 container with the files which are created in sairamana1 container
                 and if we create some more files in this sairamana2 container volume1 and these file will aslo be get into sairamana1 cnt volume1
       2. run time volume creation(creating volume at the time of creating cnt)
          docker run -it --name container3 -v volume2 ubuntu
          ls-->cd volume2--> touch file{1..3}
          ctrl pq 
          docker run -it --name container4 --volumes-from=container3 --privileged=true ubuntu
          now the files which are residing container volume3 will be having in container4
          and if we add somemore files in container4 than thay are also appeared in container3.
        3. from commands (volume mounting)
           docker volume create volume3
           docker inspect volume3
           cd /var/lib/docker/volumes/volume4/_data
           touch file{4.6}
           docker run -it --name container4 --mount source=volume4,destination=/volume4 ubuntu
          
PART2(CONTAINER TO LOCAL)
           -> container cannot copy the files so
            docker volume ls 
            docker inspect volume4
            cd /var/lib/docker/volumes/volume4/_data
            cp * -r /root/
            
PART3(LOCAL TO CONTAINER)
           1. by using docker file method
           2. cd /home/ec2-user/
              touhc file{1..5}
              docker run -it --name container7 -v /home/ec2-user:/volume5 ubuntu
              cd volume5
              ls
              file1.....file5
              touch file{6..10}
              ctrl pq 
              -> now we can have file1....file10 in our root directory .ie., where we have created first five files.
              
              
 DOCKER SYSTEM COMMANDS:( to show the memory utiligation of docker componants such as image, container. volumes .etc..)
              docker info
              docker system df (it gives all the info of images, cnts, volumes)
              docker system prune --all ( it will delete the -all stopped containers
                                                             -all networks not used by atleast one container
                                                             -all images without at least one container associated to them
                                                             -all buil catch 
                                                             - it asks confirmation first inorder to delete these all info
              docker system prune --force ( it will not ask confirmation to delete all the above info)
              docker system prune --volumes (to delete unused volumes)

 
 
JENKINS INSTALLATION IN CONTAINER:

yum install docker -y                                                                             NOTE: 1. TO START CONTAINER WHEN ITS BEING IN STOP MODE 
systemctl start docker                                                                                     docker start container name
systemctl status docker                                                                                    docker stop container name
docker run -itd --name jenkins -p 8080:8080 jenkins/jenkins:lts                                          2. WE CAN NOT BRING THEM BACK SOME CONTAINERS WHICH ARE IN 
docker logs jenkins ---> to see the password of jenkins                                                     STOPPED STATE.
                                                                                                         3. TO DELETE A CONTAINER WE NEED STOP THAT CONTAINER FIRST 
in local hsot create one webapplication file i.e, index.html                                                AFTER THAT WE CAN USE "docker rm cnt1 cnt2"  etc..
vim Dockerfile--> FROM ubuntu
                  RUN apt update -y
                  RUN apt install apache2 -y
                  COPY index.html /var/www/html
                  CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]
docker build -t image:v1 .
docker run -itd --name appcontainer -p 89:80 image:v1
-------------> now open host public ip:89 port than the web application we can see on browser.

TASK: install three webapplications in three different servers by using docker.
***********************************************************************************************************************************************************************
***********************************************************************************************************************************************************************
DAY04 02-06-2023

DOCKER-COMPOSE:  it is a tool on a docker to create multiple containers in a single time
COMPOSE FILE: it is a yml file which work on keypair value,
              in this we will give all the informantion of containers such as images, volumes, ports, networks, .etc.,
WORK FLOW: in image we will be having Dockerfile, index.html
           by using yml file we create container and than in this continer we will get the indexfile by using apache server.
                         .................................................................................
                         
 PROCESS OF DEPLOYING FOUR SERVICES OF WEB-APPLICATION IN A SINGLE SERVER USING DOCKER-COMPOSE METHOD             
Process of deploying four service of web application in a single server using docker-compose method:
          (paytm which having four services such as movie tickets, train tickets, dth service and mobile recharge)
          
          sudo -i
          yum install docker -y
          systemctl start docker
          systemctl status docker
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          ls /usr/local/bin/
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
          create sample index.html in host
          vim Dockerfile --> FROM ubuntu
                             RUN apt update -y
                             RUN apt install apache2 -y
                             COPY index.html /var/www/html                               --> COPY command will exicute at the time of image creation 
                             CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]            --> CMD command will exicute at the time of conatiner creation
          docker build -t movies:v1 .                              --> its creates an image with indext.html , apache server  and all which are present in Dockerfile.
          docker images                                             --> we will have movies:v1 image in list now.
          vim docker-compose.yml -->version: '3'
                                    services:
                                      movies:
                                        image: movies:v1
                                        ports: 
                                          - "8000:80"             --------> here 8000 is contaner port, 80 is image port(it is fixed port number for port)
                                         volumes:
                                           - "moviesvolume"
          docker-compose up -d                    ------->by exicuting this command we will create contaner and deploy movies service in webapplication server  
                                                         and we can access public ip of server with 8000 port which we have given in docker-compose.yml
                                                         i.e., public ip:8000
  again  docker build -t trains:v1 .               -------> creating image for trains services from base Dockerfile
         change source code in index.html accordingly
         add new image,port,volume, in services of docker-compose.yml file
         docker-compose up -d                   -----------> creating new container for train service and to deploy train service in that webapplication
                                                             i.e., public ip:8001                       
  again docker build -t mobile:v1              -------> creating image for mobile services from base Dockerfile     
         change source code in index.html accordingly
         add new image,port,volume, in services of docker-compose.yml file
         docker-compose up -d                   -----------> creating new container for mobile service and to deploy train service in that webapplication
                                                              i.e., public ip:8002
   again docker build -t dth:v1              -------> creating image for dth services from base Dockerfile     
         change source code in index.html accordingly
         add new image,port,volume, in services of docker-compose.yml file
         docker-compose up -d                   -----------> creating new container for dth service and to deploy train service in that webapplication
                                                               i.e., public ip:8003
                     ..................................................................................................................
          
DOCKER COMMANDS:
        docker ps --> will lists all running containers in docker engine
        docker-compose ps --> lits all containers related to images declared in a docker compose file.
        docker-compose stop --> to stop contaner from running state
        docker-compose start --> to start stopping state to start state
        docker-compose pause -->
        docker-compose unpause
        docker-compose down  --->(stop--> delete)
        docker-compose up -d --> to create container from docker-compose.yml file
        docker-compose top -->  provides information about the CPU, memory, and swap usage if you run it inside a Docker container
        docker-compose images --> 
        docker-compose logs --> Displays log output from services
        .....................................................................
        
DOCKER NETWORKS:
       docker networks are used to communicate between multiple containers which are running on same or different docker host.
       we have different types of docker networks.
       1. bridge network -->  It is a default network that container will communicate with each other within the same host
       2. host network -->  When you Want your container IP and ec2 instance IP same then you use host network
       3. none network --> When you don’t Want The container to get exposed to the world, we use none network.
                           It will not provide any network to our container.
       4. overlay network --> Used to communicate containers with each other across the multiple docker hosts.
                  .............................................................
                 
        docker network create network_name --> to create network name
        
        
        
===============================================================================================================================================
===============================================================================================================================================
DAY05, 05-06-2023.

DOCKER SWARM: 
             to maintain multiple replicas of our web allication we usee the docker swarm concept to protect application from nautral calalmities.
             
    SWARM: it is used to manage contaiers on multiple servers.
    MASTER: it is used to create and distribute the containers.
    WORKER: it is used to store containers.
    CLUSTER: group of servers 
    REPLICA: copy of a container.
    
    NOTE:  to work with docker swarm we need enable docker engine first.
    
    CLUSTER MAKING:
         1. create 3 serevers(1 master, worker1, worker2)
         2. set hostnames to 3 servers as above ( systemctl set-hostname master/worker1/worker2) and sudo -i
         3. install docker in 3 servers and start docker service ( yum install docker -y, systemctl start docker)
         4.setup cluster ( MASTER--> TOKEN--> COPY IN 2 WORKNODES). ie.,
              
              --> docker swarm init --advertise-addr 172.31.87.191 ( this is private ip of master)
              
             docker swarm join --token SWMTKN-1-0jc84xty4ydhyrp66mhkjr529xtzgew0eajyfadu21m47b675p-86gezlsls2ox1ze9inwui41l5 172.31.40.122:2377

                 after hittin enter we get one line of token and that full line is need to be paste in two worknodes and hit enter than the two 
                 workers will be added into the cluster.
           
           --> docker ls                  ---> to list the nodes in cluster.
              now we need create container/service by using n
           
              
      
          
        
                                             
                          
                          
                          
                          
                          
                                             
      
       
      

